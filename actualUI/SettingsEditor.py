#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Aug 07, 2018 01:15:33 PM

import sys
import os
import json
import tkinter as tk
from tkinter import filedialog

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GMPEhandler_support



import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import settingeditor_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Settings_Editor (root)
    settingeditor_support.init(root, top)
    root.mainloop()

w = None
def create_Settings_Editor(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Settings_Editor (w)
    settingeditor_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Settings_Editor():
    global w
    w.destroy()
    w = None




bsData1 = { #Default bsData
    1: {
        "branchSetID": "bs1",
        "applyToTectonicRegionType": "Active Shallow Fault",
    }
}
ltBranch1 = { #Default ltBranch
    1: {
        1: {
            "branchSetID": "b11",
            "text": "GMPETable",
            "gmpe_table": "../gm_tables/WcrustFRjb_low_clC.hdf5",
            "uncertaintyWeight": "0.2"
        }
    }
}
ltData1 = { #Default ltData
    1: {
        "branchingLevelID": "bl1",
        "ltBranch": ltBranch1,
        "bsData": bsData1
    }
}

#Real Thing
bsData = { #Default bsData
}
ltBranch = { #Default ltBranch
}
ltData = { #Default ltData
}




def parseOut(Data):
    es = ""
    for x in range(0,len(Data)): #Parse the Branch Sets!!!
        if len(Data) != 0:
            #print(len(Data))
            x=x+1

        curBlock = Data[x]
        bsData2 = curBlock["bsData"][x]
        es = es+"\n Branch Set "+str(x)+" (Branch Set ID:  "+bsData2["branchSetID"]+") (Branching Level ID: "+curBlock["branchingLevelID"]+") (Tectonic Region Type: "+bsData2["applyToTectonicRegionType"]+")"
        for z in range(0, len(curBlock["ltBranch"][x])): #Parse each branch set's branches
            z = z+1
            curChild = curBlock["ltBranch"][x][z]
            es = es+"\n    -> Branch "+str(z)+" (Branch ID: "+curChild["branchSetID"]+") (GMPE Table: "+curChild["gmpe_table"]+") (Uncertainty Weight: "+curChild["uncertaintyWeight"]+")"
        print(es)
    pToOutput(es)


def deleteFunc(BoS, bsid, blid):
    #print("BoS -> "+BoS)
    #print("Set ID -> "+bsid)
    #print("Branch ID -> "+blid)
    if BoS == "branch":
        for a in range(0,len(bsData)):
            a = a + 1
            #print(a)
            curBranch = bsData[a]
            if curBranch["branchSetID"] == bsid:
                #print("yeetus")
                for z in range(0, len(ltBranch[a])):
                    z=z+1
                    cB2 = ltBranch[a][z]
                    #print(cB2["branchSetID"]+" : "+blid)
                    if cB2["branchSetID"] == blid:
                        del(ltBranch[a][z])
                        parseOut(ltData)
                #print("bsData -> "+bsData)
                #print("ltBranch -> "+ltBranch)
                #print("ltData -> "+ltData)
    elif BoS == "set":
        for a in range(0,len(bsData)):
            a = a + 1
            curSet = bsData[a]
            if curSet["branchSetID"] == bsid:
                #print('yee')
                del(ltBranch[a])
                del(bsData[a])
                del(ltData[a])
                parseOut(ltData)


#POPUP WINDOW
def deletePopup(): #Deletetion POPUP
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        style = ttk.Style()
        if sys.platform == "win32":
            style.theme_use('winnative')
        style.configure('.',background=_bgcolor)
        style.configure('.',foreground=_fgcolor)
        style.configure('.',font="TkDefaultFont")
        style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        top = tk.Tk()
        top.geometry("425x130+789+438")
        top.title("Delete ...")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        blIDtxt = ttk.Label(top)
        blIDtxt.place(relx=0.01, rely=0.31, height=19, width=136)
        blIDtxt.configure(background="#d9d9d9")
        blIDtxt.configure(foreground="#000000")
        blIDtxt.configure(font="TkDefaultFont")
        blIDtxt.configure(relief=FLAT)
        blIDtxt.configure(text='''Set/Branch ID''')

        blIDbox = ttk.Entry(top)
        blIDbox.place(relx=0.54, rely=0.31, relheight=0.15, relwidth=0.45)
        blIDbox.configure(takefocus="")
        blIDbox.configure(cursor="ibeam")


        BorSVar = tk.IntVar()
        BorSVar.set(1)

        def sbBor():
            BorSVar.set(0)
            #print(BorSVar.get())
        def bbBor():
            BorSVar.set(1)
            #print(BorSVar.get())


        SetButton = tk.Radiobutton(top,
            value=0,
            variable=BorSVar,
            command=sbBor,
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            disabledforeground="#a3a3a3",
            foreground="#000000",
            highlightbackground="#d9d9d9",
            highlightcolor="black",
            justify=LEFT,
            text="Set"
        )
        SetButton.place(relx=0.54, rely=0.08, relheight=0.19, relwidth=0.1)



        BranchButton = tk.Radiobutton(top,
            value=1,
            variable=BorSVar,
            command=bbBor,
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            disabledforeground="#a3a3a3",
            foreground="#000000",
            highlightbackground="#d9d9d9",
            highlightcolor="black",
            justify=LEFT,
            text="Branch"
        )
        BranchButton.place(relx=0.82, rely=0.08, relheight=0.19, relwidth=0.15)


        def dele():
            print("FOR BURGER??")
            print(BorSVar.get())
            if BorSVar.get() == 1:
                print("1")
                deleteFunc("branch", blIDbox.get(), blIDbox_2.get())
            elif BorSVar.get() == 0:
                print("0")
                deleteFunc("set", blIDbox.get(), "")

        def onClick():
            dele()
            top.destroy()

        createButton = Button(top)
        createButton.place(relx=0.39, rely=0.77, height=25, width=90)
        createButton.configure(activebackground="#d9d9d9")
        createButton.configure(activeforeground="#000000")
        createButton.configure(background="#d9d9d9")
        createButton.configure(disabledforeground="#a3a3a3")
        createButton.configure(foreground="#000000")
        createButton.configure(highlightbackground="#d9d9d9")
        createButton.configure(highlightcolor="black")
        createButton.configure(pady="0")
        createButton.configure(relief=GROOVE)
        createButton.configure(command=onClick)
        createButton.configure(text='''Delete''')

        def onClick():
            dele()
            top.destroy()


        SorB = ttk.Label(top)
        SorB.place(relx=0.01, rely=0.08, height=19, width=136)
        SorB.configure(background="#d9d9d9")
        SorB.configure(foreground="#000000")
        SorB.configure(font="TkDefaultFont")
        SorB.configure(relief=FLAT)
        SorB.configure(text='''Set or Branch''')





        blIDtxt_1 = ttk.Label(top)
        blIDtxt_1.place(relx=0.01, rely=0.54, height=19, width=200)
        blIDtxt_1.configure(background="#d9d9d9")
        blIDtxt_1.configure(foreground="#000000")
        blIDtxt_1.configure(font="TkDefaultFont")
        blIDtxt_1.configure(relief=FLAT)
        blIDtxt_1.configure(text='''Branch ID (Ignore if deleting set)''')

        blIDbox_2 = ttk.Entry(top)
        blIDbox_2.place(relx=0.54, rely=0.54, relheight=0.15, relwidth=0.45)

        blIDbox_2.configure(takefocus="")
        blIDbox_2.configure(cursor="ibeam")





def nbsPopup(): #New Branch Set Popup Window
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        style = ttk.Style()
        if sys.platform == "win32":
            style.theme_use('winnative')
        style.configure('.',background=_bgcolor)
        style.configure('.',foreground=_fgcolor)
        style.configure('.',font="TkDefaultFont")
        style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        top = tk.Tk()
        top.geometry("425x154+387+368")
        top.title("Create New Branch Set")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        #branch set txt label
        bsIDtxt = ttk.Label(top)
        bsIDtxt.place(relx=0.01, rely=0.06, height=20, width=86)
        bsIDtxt.configure(background="#d9d9d9")
        bsIDtxt.configure(foreground="#000000")
        bsIDtxt.configure(font="TkDefaultFont")
        bsIDtxt.configure(relief=FLAT)
        bsIDtxt.configure(text='''Branch Set ID''')
        #branch set id txt box
        bsIDbox = ttk.Entry(top)
        bsIDbox.place(relx=0.54, rely=0.06, relheight=0.13, relwidth=0.45)
        bsIDbox.configure(takefocus="")
        bsIDbox.configure(cursor="ibeam")

        blIDtxt = ttk.Label(top)
        blIDtxt.place(relx=0.01, rely=0.26, height=19, width=136)
        blIDtxt.configure(background="#d9d9d9")
        blIDtxt.configure(foreground="#000000")
        blIDtxt.configure(font="TkDefaultFont")
        blIDtxt.configure(relief=FLAT)
        blIDtxt.configure(text='''Branching Level ID''')

        blIDbox = ttk.Entry(top)
        blIDbox.place(relx=0.54, rely=0.26, relheight=0.13, relwidth=0.45)
        blIDbox.configure(takefocus="")
        blIDbox.configure(cursor="ibeam")

        attrtTXT = ttk.Label(top)
        attrtTXT.place(relx=0.28, rely=0.45, height=19, width=180)
        attrtTXT.configure(background="#d9d9d9")
        attrtTXT.configure(foreground="#000000")
        attrtTXT.configure(font="TkDefaultFont")
        attrtTXT.configure(relief=FLAT)
        attrtTXT.configure(text='''Apply To Tectonic Region Type''')

        attrtBOX = ttk.Entry(top)
        attrtBOX.place(relx=0.01, rely=0.58, relheight=0.13, relwidth=0.98)
        attrtBOX.configure(takefocus="")
        attrtBOX.configure(cursor="ibeam")


        createButton = Button(top)
        createButton.place(relx=0.39, rely=0.78, height=25, width=90)
        createButton.configure(activebackground="#d9d9d9")
        createButton.configure(activeforeground="#000000")
        createButton.configure(background="#d9d9d9")
        createButton.configure(disabledforeground="#a3a3a3")
        createButton.configure(foreground="#000000")
        createButton.configure(highlightbackground="#d9d9d9")
        createButton.configure(highlightcolor="black")
        createButton.configure(pady="0")
        createButton.configure(relief=GROOVE)
        createButton.configure(text='''Create''')
        def onClick():
            newBranchSet(bsIDbox.get(), attrtBOX.get(), blIDbox.get())
            top.destroy()
        createButton.configure(command=onClick)

def nbPopup(): #New Branch Set Popup Window
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        style = ttk.Style()
        if sys.platform == "win32":
            style.theme_use('winnative')
        style.configure('.',background=_bgcolor)
        style.configure('.',foreground=_fgcolor)
        style.configure('.',font="TkDefaultFont")
        style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        top = tk.Tk()
        top.geometry("425x154+387+368")
        top.title("Create New Branch")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        #branch set txt label
        bsIDtxt = ttk.Label(top)
        bsIDtxt.place(relx=0.01, rely=0.06, height=20, width=86)
        bsIDtxt.configure(background="#d9d9d9")
        bsIDtxt.configure(foreground="#000000")
        bsIDtxt.configure(font="TkDefaultFont")
        bsIDtxt.configure(relief=FLAT)
        bsIDtxt.configure(text='Branch Set ID')
        #branch set id txt box
        bsIDbox = ttk.Entry(top)
        bsIDbox.place(relx=0.54, rely=0.06, relheight=0.13, relwidth=0.45)
        bsIDbox.configure(takefocus="")
        bsIDbox.configure(cursor="ibeam")

        blIDtxt = ttk.Label(top)
        blIDtxt.place(relx=0.01, rely=0.26, height=19, width=136)
        blIDtxt.configure(background="#d9d9d9")
        blIDtxt.configure(foreground="#000000")
        blIDtxt.configure(font="TkDefaultFont")
        blIDtxt.configure(relief=FLAT)
        blIDtxt.configure(text='Uncertainty Weight')

        blIDbox = ttk.Entry(top)
        blIDbox.place(relx=0.54, rely=0.26, relheight=0.13, relwidth=0.45)
        blIDbox.configure(takefocus="")
        blIDbox.configure(cursor="ibeam")

        attrtTXT = ttk.Label(top)
        attrtTXT.place(relx=0.42, rely=0.45, height=19, width=180)
        attrtTXT.configure(background="#d9d9d9")
        attrtTXT.configure(foreground="#000000")
        attrtTXT.configure(font="TkDefaultFont")
        attrtTXT.configure(relief=FLAT)
        attrtTXT.configure(text='''gmpe_table''')

        attrtBOX = ttk.Entry(top)
        attrtBOX.place(relx=0.01, rely=0.58, relheight=0.13, relwidth=0.98)
        attrtBOX.configure(takefocus="")
        attrtBOX.configure(cursor="ibeam")


        createButton = Button(top)
        createButton.place(relx=0.39, rely=0.78, height=25, width=90)
        createButton.configure(activebackground="#d9d9d9")
        createButton.configure(activeforeground="#000000")
        createButton.configure(background="#d9d9d9")
        createButton.configure(disabledforeground="#a3a3a3")
        createButton.configure(foreground="#000000")
        createButton.configure(highlightbackground="#d9d9d9")
        createButton.configure(highlightcolor="black")
        createButton.configure(pady="0")
        createButton.configure(relief=GROOVE)
        createButton.configure(text='''Create''')
        def onClick():
            newBranch(bsIDbox.get(), attrtBOX.get(), blIDbox.get())
            top.destroy()
        createButton.configure(command=onClick)




def pToOutput(text):
    output.configure(state=NORMAL)
    output.delete(1.0, "end")
    output.insert("end", text)
    output.configure(state=DISABLED)

def newBranchSet(branchSetID, applyToTectonicRegionType, branchingLevelID):
    global ltData
    global bsData
    global output

    if branchingLevelID == "" or branchingLevelID == " ":
        branchingLevelID = "bl"+str(len(ltData)+1)
    if branchSetID == "" or branchSetID == " ":
        branchSetID = "bs"+str(len(bsData)+1)

    ltData[len(ltData)+1] = {
        "branchingLevelID": branchingLevelID,
        "ltBranch": ltBranch,
        "bsData": bsData
    }
    bsData[len(bsData)+1] = {
        "branchSetID": branchSetID,
        "applyToTectonicRegionType":applyToTectonicRegionType
    }
    ltBranch[len(ltBranch)+1] = {}
    parseOut(ltData)

def newBranch(bsID, gmpe_table, uncertaintyWeight):
    global ltData
    impNum = 0
    bsData5 = ltData[1]["bsData"]
    ltBranch5 = ltData[1]["ltBranch"]
    for x in range(0,len(bsData5)): #get the branchset number
        x = x+1
        y = bsData5[x]
        if y["branchSetID"] == bsID:
            impNum = x
    branchSet = ltBranch5[impNum]
    branchSet[len(branchSet)+1] = {
        "branchSetID": "b"+str(impNum)+str(len(branchSet)+1),
        "text": "GMPETable",
        "gmpe_table": gmpe_table,
        'uncertaintyWeight': uncertaintyWeight
    }
    print("Test -> "+json.dumps(ltData))
    parseOut(ltData)

def deleteObject(type, obj):
    print("branch")



def setoutput(var):
    global output
    output = var
    #print('ran?')




specY = 25
numMade = 0

atxtbox = {}
ifPreset = 1

v = {
    #general
    1: {"description": ""},
    2: {"calculation_mode": ""},
    3: {"random_seed": ""},
    #geometry
    4: {"sites_csv": ""},
    #logic_tree
    5: {"number_of_logic_tree_samples": ""},
    #Erf
    6: {"rupture_mesh_spacing": ""},
    7: {"width_of_mfd_bin": ""},
    8: {"area_source_discretization": ""},
    #site_params
    9: {"reference_vs30_type": ""},
    10: {"reference_vs30_value": ""},
    11: {"reference_depth_to_2pt5km_per_sec": ""},
    12: {"reference_depth_to_1pt0km_per_sec": ""},
    #calculation
    13: {"source_model_logic_tree_file": ""},
    14: {"gsim_logic_tree_file": ""},
    15: {"investigation_time": ""},
    16: {"intensity_measure_types_and_levels": ""},
    17: {"truncation_level": ""},
    18: {"maximum_distance": ""},
    #output
    19: {"export_dir": ""},
    20: {"mean_hazard_curves": ""},
    21: {"quantile_hazard_curves": ""},
    22: {"hazard_maps": ""},
    23: {"uniform_hazard_spectra": ""},
    24: {"poes": ""}
}




class Settings_Editor:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x448+733+301")
        top.title("Settings Editor")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.resizable(False, False)

        def export(data):
            toExp = json.dumps(json.dumps(ltData))
            top.filename = filedialog.asksaveasfilename(initialdir = "/",title = "Select file",filetypes = (("XML file","*.xml"), ("all files","*.*")))
            if top.filename == "":
                return 0
            top.filename = top.filename+".xml"
            os.system('python ../gmpe-handler.py -output "'+top.filename+'" -ltd '+toExp)


        def tab_changed(event):
            curTab = self.notebook.index("current")
            if curTab == 1:
                top.geometry("670x650")

            else:
                top.geometry("600x448")


        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.notebook = ttk.Notebook(top)
        self.notebook.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.notebook_t0 = Frame(self.notebook)
        self.notebook.add(self.notebook_t0, padding=3)
        self.notebook.tab(0, text="GMPE Logic Tree", compound="left"
                ,underline="-1",)
        self.notebook.bind("<<NotebookTabChanged>>", tab_changed)

        self.notebook_t0.configure(background="#d9d9d9")
        self.notebook_t0.configure(highlightbackground="#d9d9d9")
        self.notebook_t0.configure(highlightcolor="black")

        self.notebook_t1 = Frame(self.notebook)
        self.notebook.add(self.notebook_t1, padding=3)
        self.notebook.tab(1, text="Job.ini",compound="left",underline="-1",)
        self.notebook_t1.configure(background="#d9d9d9")
        self.notebook_t1.configure(highlightbackground="#d9d9d9")
        self.notebook_t1.configure(highlightcolor="black")

        self.Scrolledtext1 = ScrolledText(self.notebook_t0)
        self.Scrolledtext1.place(relx=0.0, rely=0.07, relheight=0.76
                , relwidth=1.0)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(state=DISABLED)
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)
        setoutput(self.Scrolledtext1)

        self.Export = Button(self.notebook_t0)
        self.Export.place(relx=0.47, rely=0.01, height=21, width=44)
        self.Export.configure(activebackground="#bababa")
        self.Export.configure(activeforeground="#000000")
        self.Export.configure(background="#bababa")
        self.Export.configure(disabledforeground="#a3a3a3")
        self.Export.configure(foreground="#000000")
        self.Export.configure(highlightbackground="#d9d9d9")
        self.Export.configure(highlightcolor="black")
        self.Export.configure(pady="0")
        self.Export.configure(relief=FLAT)
        self.Export.configure(text='''Export''')
        self.Export.configure(command=lambda: export(ltData))

        self.BranchButton = Button(self.notebook_t0)
        self.BranchButton.place(relx=0.0, rely=0.85, height=55, width=198)
        self.BranchButton.configure(activebackground="#bababa")
        self.BranchButton.configure(activeforeground="#000000")
        self.BranchButton.configure(background="#bababa")
        self.BranchButton.configure(disabledforeground="#a3a3a3")
        self.BranchButton.configure(foreground="#000000")
        self.BranchButton.configure(highlightbackground="#d9d9d9")
        self.BranchButton.configure(highlightcolor="black")
        self.BranchButton.configure(pady="0")
        self.BranchButton.configure(relief=FLAT)
        self.BranchButton.configure(text='''New Branch''')
        self.BranchButton.configure(width=77)
        self.BranchButton.configure(command=lambda: nbPopup())

        self.newset = Button(self.notebook_t0)
        self.newset.place(relx=0.33, rely=0.85, height=55, width=199)
        self.newset.configure(activebackground="#bababa")
        self.newset.configure(activeforeground="#000000")
        self.newset.configure(background="#bababa")
        self.newset.configure(disabledforeground="#a3a3a3")
        self.newset.configure(foreground="#000000")
        self.newset.configure(highlightbackground="#d9d9d9")
        self.newset.configure(highlightcolor="black")
        self.newset.configure(pady="0")
        self.newset.configure(relief=FLAT)
        self.newset.configure(text='''New Set''')
        self.newset.configure(command=lambda: nbsPopup())

        self.delete = Button(self.notebook_t0)
        self.delete.place(relx=0.66, rely=0.85, height=55, width=199)
        self.delete.configure(activebackground="#bababa")
        self.delete.configure(activeforeground="#000000")
        self.delete.configure(background="#bababa")
        self.delete.configure(disabledforeground="#a3a3a3")
        self.delete.configure(foreground="#000000")
        self.delete.configure(highlightbackground="#d9d9d9")
        self.delete.configure(highlightcolor="black")
        self.delete.configure(pady="0")
        self.delete.configure(relief=FLAT)
        self.delete.configure(text='''Delete''')
        self.delete.configure(command=lambda: deletePopup())

        def send(t): #on click
            global v
            global atxtbox
            cmdString = "python ../job-handler.py "
            for x in range(0,len(v)):
                x=x+1
                curTab = v[x]
                for z in curTab:
                    curBox = atxtbox[z]
                    txt = curBox.get()
                    print("Val -> "+z+": "+txt)
                    if txt == "":

                        cmdString = cmdString+'-'+z+' " " '
                    else:
                        cmdString = cmdString+'-'+z+' "'+txt+'" '
            cmdString = cmdString+'-outputFile "'+filedialog.asksaveasfilename(initialdir = "/",title = "Select file",filetypes = (("INI file","*.ini"), ("all files","*.*")))+'.ini" '
            print(cmdString)
            os.system(cmdString)



        self.Save = Button(self.notebook_t1)
        self.Save.place(relx=0.0, rely=0.0, height=25, relwidth=1)
        self.Save.configure(activebackground="#bababa")

        self.Save.configure(background="#bababa")
        self.Save.configure(disabledforeground="#bababa")
        self.Save.configure(foreground="#000000")
        self.Save.configure(highlightbackground="#000000")
        self.Save.configure(highlightcolor="#000000")
        self.Save.configure(pady="0")
        self.Save.configure(relief=FLAT)
        self.Save.configure(text='''Export''')
        self.Save.configure(width=380)
        self.Save.bind("<Button-1>", send)
        global preset
        numMade = 0
        for z in range(0,len(v)):
            #print("Z -> "+str(z))
            z = z+1
            curTab = v[z]
            for key in curTab:
                specY = z * 25
                self.TLabel1 = ttk.Label(self.notebook_t1)
                self.TLabel1.place(relx=0.0, y=specY, height=25, width=200)
                self.TLabel1.configure(background="#d9d9d9")
                self.TLabel1.configure(foreground="#000000")
                self.TLabel1.configure(font="TkDefaultFont")
                self.TLabel1.configure(relief=FLAT)
                self.TLabel1.configure(text=key)
                self.TLabel1.configure(wraplength="200")
                self.TEntry1 = ttk.Entry(self.notebook_t1)
                self.TEntry1.place(relx=0.4, y=specY, height=25, relwidth=0.6)
                self.TEntry1.configure(takefocus="")
                self.TEntry1.configure(width=405)
                self.TEntry1.configure(cursor="ibeam")
                self.TEntry1.configure(textvariable=curTab[key])
                atxtbox[key] = self.TEntry1
                numMade = numMade + 1
                specY = specY + 25


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()
